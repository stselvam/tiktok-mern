{"version":3,"sources":["Components/VideoFooter/VideoFooter.js","Components/VideoSidebar/VideoSidebar.js","Components/Video/Video.js","Services/Axios.js","App/App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["VideoFooter","channel","detail","tickertext","className","mode","index","src","alt","VideoSidebar","likes","shares","comments","useState","liked","setLiked","onClick","e","fontSize","parseInt","Video","posterurl","vidurl","playing","setPlaying","videoRef","useRef","ref","current","pause","play","poster","loop","type","Axios","axios","create","baseURL","App","videos","setVideos","useEffect","a","get","response","data","console","warn","alert","fetchPosts","length","map","circle","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.084f166e.chunk.js","sourcesContent":["import React from 'react'\r\nimport MusicNoteIcon from '@material-ui/icons/MusicNote';\r\nimport Ticker from \"react-ticker\";\r\nimport \"./VideoFooter.css\";\r\n\r\nfunction VideoFooter({channel, detail, tickertext}) {\r\n    return (\r\n        <div className=\"video___footer\">\r\n            <div className=\"text\">\r\n                <h3>@{channel}</h3>\r\n                <p>{detail}</p>\r\n                <div className=\"ticker\">\r\n                    <MusicNoteIcon className=\"icon\"/>\r\n                    <Ticker mode=\"smooth\">\r\n                        {({index}) => (\r\n                            <>\r\n                                <p>{tickertext}</p>\r\n                            </>\r\n                        )}\r\n                    </Ticker>\r\n                </div>\r\n            </div>\r\n            <img src=\"/images/disc.png\" alt=\"\" />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default VideoFooter\r\n","import React, { useState } from 'react'\r\nimport FavoriteIcon from '@material-ui/icons/Favorite';\r\nimport FavoriteBorderIcon from '@material-ui/icons/FavoriteBorder';\r\nimport MessageIcon from '@material-ui/icons/Message';\r\nimport ShareIcon from '@material-ui/icons/Share';\r\nimport \"./VideoSidebar.css\";\r\n\r\nfunction VideoSidebar({likes, shares, comments}) {\r\n    const [liked, setLiked] = useState(false);\r\n\r\n    return (\r\n        <div className=\"video___sidebar\">\r\n            <div className=\"button\">\r\n                {liked? (\r\n                    <FavoriteIcon onClick={(e) => setLiked(false)} fontSize=\"large\"/>\r\n                ): (\r\n                    <FavoriteBorderIcon onClick={(e) => setLiked(true)} fontSize=\"large\"/>\r\n                )}\r\n                <p>{liked? (parseInt(likes)+1) : (likes)}</p>\r\n            </div>\r\n            <div className=\"button\">\r\n                <MessageIcon fontSize=\"large\"/>\r\n                <p>{comments}</p>\r\n            </div>\r\n            <div className=\"button\">\r\n                <ShareIcon fontSize=\"large\"/>\r\n                <p>{shares}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default VideoSidebar\r\n","import React, { useRef, useState } from 'react'\r\nimport \"./videos.css\";\r\n\r\nimport VideoFooter from \"../VideoFooter/VideoFooter\";\r\nimport VideoSidebar from \"../VideoSidebar/VideoSidebar\";\r\n\r\nfunction Video({posterurl, vidurl, likes, shares, comments, channel, detail, tickertext}) {\r\n    const [playing, setPlaying] = useState(false);\r\n    const videoRef = useRef(null);\r\n    const handleVideoPress = () => {\r\n        if(playing) {\r\n            videoRef.current.pause();\r\n            setPlaying(false);\r\n        } else{\r\n            videoRef.current.play();\r\n            setPlaying(true);\r\n        }\r\n\r\n    };\r\n\r\n    return (\r\n        <div className=\"video___element\">\r\n            <video ref={videoRef} onClick={handleVideoPress} className=\"video___player\" poster={posterurl} loop>\r\n                <source src={vidurl} type=\"video/mp4\" />\r\n            </video>\r\n            <VideoFooter channel={channel} detail={detail} tickertext={tickertext}/>\r\n            <VideoSidebar likes={likes} comments={comments} shares={shares}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Video\r\n","import axios from \"axios\";\r\nconst Axios = axios.create({\r\n    baseURL: \"https://mern-tiktok-api.herokuapp.com/\"\r\n});\r\nexport default Axios;","import React, { useEffect, useState } from 'react';\nimport SkeletonLoader from \"tiny-skeleton-loader-react\";\nimport './App.css';\nimport Video from \"../Components/Video/Video\"\nimport Axios from '../Services/Axios';\n\nfunction App() {\n  const [videos, setVideos]= useState([]);\n  useEffect(() => {\n    async function fetchPosts() {\n      try {\n        const response = await Axios.get(\"/v2/posts\");\n        setVideos(response.data);\n        return response;\n      } catch (error) {\n        console.warn(\"Not connected to the internet!\");\n        alert(\"Not connected to the internet!\");\n      }\n    }\n    fetchPosts();\n  }, []);\n  return (\n    <div className=\"app\">\n      {/* Apps Container */}\n      {/* Videos */}\n      {videos.length?\n        <div className=\"app___videos\">\n          {videos.map(({posterurl, vidurl, likes, comments, shares, channel, detail, tickertext}, index) => (\n            <Video key={index} posterurl={posterurl} vidurl={vidurl} likes={likes} comments={comments} shares={shares} channel={channel} detail={detail} tickertext={tickertext} />\n          ))}\n        </div>\n        :\n        <div className=\"skeleton___loader\">\n          <div className=\"loader___animation\"></div>\n          <div className=\"loader___sidebar\">\n            <SkeletonLoader circle/>\n            <SkeletonLoader circle/>\n            <SkeletonLoader circle/>\n          </div>\n          <div className=\"loader___footer\">\n            <SkeletonLoader/>\n            <SkeletonLoader/>\n          </div>\n        </div>\n      }\n      {/* <video/> */}\n      {/* <video/> */}\n      {/* <video/> */}\n      {/* <video/> */}\n      {/* <video/> */}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport \"./index.css\";\nimport App from './App/App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}